import{_ as t,c as o,o as a,a4 as e}from"./chunks/framework.BG-HYELF.js";const g=JSON.parse('{"title":"10-3 处理流程设计-系统设计-人机界面设计","description":"","frontmatter":{},"headers":[],"relativePath":"note/architect/basic/10-3.md","filePath":"note/architect/basic/10-3.md","lastUpdated":null}'),r={name:"note/architect/basic/10-3.md"},s=e('<h1 id="_10-3-处理流程设计-系统设计-人机界面设计" tabindex="-1">10-3 处理流程设计-系统设计-人机界面设计 <a class="header-anchor" href="#_10-3-处理流程设计-系统设计-人机界面设计" aria-label="Permalink to &quot;10-3 处理流程设计-系统设计-人机界面设计&quot;">​</a></h1><h2 id="处理流程设计" tabindex="-1">处理流程设计 <a class="header-anchor" href="#处理流程设计" aria-label="Permalink to &quot;处理流程设计&quot;">​</a></h2><h3 id="流程表示工具" tabindex="-1">流程表示工具 <a class="header-anchor" href="#流程表示工具" aria-label="Permalink to &quot;流程表示工具&quot;">​</a></h3><blockquote><p><strong>程序流程图（Program Flow Diagram, PFD）</strong></p></blockquote><p>用一些图框表示各种操作，它独立与任何一种程序设计语言，比较直观、清洗，易于学习掌握。任何复杂的程序流程图都应该由<strong>顺序、选择和循环结构</strong>组成或嵌套而成。</p><blockquote><p><strong>IPO图</strong></p></blockquote><p>(Input-Process-Output 输入-加工-输出)</p><p>也是流程描述工具，用来描述构成软件系统的每个模块的<strong>输入、输出和数据加工。</strong></p><blockquote><p><strong>N-S图</strong> 盒图</p></blockquote><p>容易表示嵌套和层次关系，并具有强烈的结构化特征。但是当问题很复杂时，N-S图可能很大，因此<strong>不适合于复杂程序的设计</strong>。</p><blockquote><p><strong>问题分析图（PAD）</strong></p></blockquote><p>是一种支持<strong>结构化程序设计</strong>的图形工具。PAD具有清晰的逻辑结构、标准化的图形等优点，更重要的是，它引导设计人员使用结构化程序设计方法，从而提高程序的质量。</p>',12),n=[s];function c(l,i,p,_,d,h){return a(),o("div",null,n)}const b=t(r,[["render",c]]);export{g as __pageData,b as default};
