import{_ as o,c as t,o as r,a4 as a,bz as s,bA as l,bB as i,bC as n,bD as e,bE as g,bF as p,bG as h,bH as c,bI as d}from"./chunks/framework.C8kugyzg.js";const D=JSON.parse('{"title":"9-2 摘要-签名-PKI-访问控制-DOS-欺骗技术","description":"","frontmatter":{},"headers":[],"relativePath":"note/architect/basic/9/9-2.md","filePath":"note/architect/basic/9/9-2.md","lastUpdated":null}'),u={name:"note/architect/basic/9/9-2.md"},b=a('<h1 id="_9-2-摘要-签名-pki-访问控制-dos-欺骗技术" tabindex="-1">9-2 摘要-签名-PKI-访问控制-DOS-欺骗技术 <a class="header-anchor" href="#_9-2-摘要-签名-pki-访问控制-dos-欺骗技术" aria-label="Permalink to &quot;9-2 摘要-签名-PKI-访问控制-DOS-欺骗技术&quot;">​</a></h1><h2 id="信息摘要" tabindex="-1">信息摘要 <a class="header-anchor" href="#信息摘要" aria-label="Permalink to &quot;信息摘要&quot;">​</a></h2><p><strong>就是一段数据的特征信息，当数据发生了改变，信息摘要也会发生改变</strong>，发送方<strong>会将数据和信息摘要一起传给接收方</strong>。接收方会根据接收到的数据<strong>重新生成一个信息摘要</strong>，若此摘要和接收到的摘要相同，则说明数据正确。<strong>信息摘要是由哈希函数生成的</strong>。（<strong>保证数据完整性</strong>，因为接收方会把发送方发送过来的信息摘要和=接收方自己生成的信息摘要进行比较，如果不一样就代表传输过程中信息摘要被人修改）</p><h3 id="信息摘要特点" tabindex="-1">信息摘要特点 <a class="header-anchor" href="#信息摘要特点" aria-label="Permalink to &quot;信息摘要特点&quot;">​</a></h3><p>不管数据多长，都会<strong>产生固定长度的信息摘要；任何不同的输入数据，都会产生不同的信息摘要</strong>；单向性：<strong>即只能由数据生成信息摘要，不能由信息摘要还原数据</strong>。</p><h3 id="信息摘要算法" tabindex="-1">信息摘要算法 <a class="header-anchor" href="#信息摘要算法" aria-label="Permalink to &quot;信息摘要算法&quot;">​</a></h3><ul><li>MD5（产生128位的输出）</li><li>SHA-1（安全散列算法，产生160位的输出，安全性更高）</li></ul><h2 id="数字签名" tabindex="-1">数字签名 <a class="header-anchor" href="#数字签名" aria-label="Permalink to &quot;数字签名&quot;">​</a></h2><p><strong>唯一标识一个发送方</strong></p><p>发送者发送数据时，<strong>使用发送者的私钥进行加密</strong>，接收者接收到数据后，只能<strong>使用发送者的公钥进行解密</strong>，这样就能<strong>唯一确定发送方</strong>，这也是数字签名的过程。但<strong>无法保证机密性</strong>。</p><p><img src="'+s+'" alt=""></p><h2 id="pki" tabindex="-1">PKI <a class="header-anchor" href="#pki" aria-label="Permalink to &quot;PKI&quot;">​</a></h2><p>公钥基础设施PKI：是以不对称密钥加密技术为基础，以数据机密性、完整性、身份认证和行为不可抵赖性为安全目的，来实施和提供安全服务的具有普适性的安全基础设施。</p><h3 id="数字证书" tabindex="-1">数字证书 <a class="header-anchor" href="#数字证书" aria-label="Permalink to &quot;数字证书&quot;">​</a></h3><p>一个数据结构，是一种由一个<strong>可信任的权威机构签署的信息集合</strong>。在不同的应用中有不同的证书。例如X.509证书必须包含下列信息：1.版本号 2.序列号 3.签名算法标识符 4.认证机构 5.有效期限 6.主题信息 7.认证机构的数字签名 8.公钥信息</p><p><strong>公钥证书主要用于确保公钥及其与用户绑定关系的安全。这个公钥就是证书所标识的那个主体的合法的公钥。</strong></p><p>任何一个用户只要知道签证机构的公钥，就能检查对证书的签名的合法性。如果检查正确，那么用户就可以相信那个证书所携带的公钥是真实的，而且这个公钥就是证书所标识的那个主体的合法的公钥。例如驾照</p><h3 id="签证机构ca" tabindex="-1">签证机构CA <a class="header-anchor" href="#签证机构ca" aria-label="Permalink to &quot;签证机构CA&quot;">​</a></h3><p><strong>负责签发证书、管理和撤销证书</strong>。是所有注册用户所新来的权威机构，CA在给用户签发证书时<strong>要加上自己的数字签名，以保证证书信息的真实性。任何机构可以用CA的公钥来验证改证书的合法性</strong></p><h3 id="考试真题" tabindex="-1">考试真题 <a class="header-anchor" href="#考试真题" aria-label="Permalink to &quot;考试真题&quot;">​</a></h3><p><img src="'+l+'" alt=""></p><p>解析：数字签名是保证信息传输的完整性，发送者的身份认证、防止交易中的抵赖发生</p><p>答案：C</p><p><img src="'+i+'" alt=""></p><p>答案：C</p><p><img src="'+n+'" alt=""></p><p>答案：A</p><p><img src="'+e+'" alt=""></p><p>答案：B</p><h2 id="访问控制" tabindex="-1">访问控制 <a class="header-anchor" href="#访问控制" aria-label="Permalink to &quot;访问控制&quot;">​</a></h2><ul><li><strong>访问控制是指主体依据某些控制策略或权限对客体本身或是其资源进行的不同授权访问</strong>。访问控制包括3个要素：即<strong>主体、客体和控制策略</strong></li><li>访问控制包括认证、控制策略实现和审计3方面的内容</li></ul><ol><li>访问控制矩阵（ACM）：<strong>通过矩阵的形式表示访问控制规则和授权用户权限的方法，主体作为行，客体作为列</strong></li></ol><p><img src="'+g+'" alt=""></p><ol start="2"><li>访问控制表（ACL）：目前<strong>最流行，使用最多的</strong>访问控制实现技术。每个客体有一个访问控制表，是系统中每一个有权访问这个客体的主体的信息，这种实现技术实际上是<strong>按列保存访问矩阵</strong>。</li></ol><p><img src="'+p+'" alt=""></p><ol start="3"><li>能力表：对应于访问控制表，这种实现技术实际上是<strong>按行保存访问矩阵</strong>。每个主体有一个能力表，是该主体对系统中每一个客体的访问权限信息，使用能力表实现的访问控制系统可以很方便地查询某一主体的所有访问权限</li></ol><p><img src="'+h+'" alt=""></p><ol start="4"><li>授权关系表：<strong>每一行（或者说元组）就是访问矩阵中的一个非空元素，是某一个主体对应于某一个客体的访问权限信息</strong>。如果授权关系表按主体排序，查询时就可以得到能力表的效率；如果按客体排序，查询时可以得到访问控制表的效率</li></ol><h2 id="dos-信息安全的抗攻击技术" tabindex="-1">DOS 信息安全的抗攻击技术 <a class="header-anchor" href="#dos-信息安全的抗攻击技术" aria-label="Permalink to &quot;DOS 信息安全的抗攻击技术&quot;">​</a></h2><ul><li>为对抗攻击者的攻击，密钥生成需要考虑3个方面的因素：<strong>增大密钥空间、选择强钥（复杂的）、密钥的随机性（使用随机数）</strong></li><li>拒绝服务攻击（DoS）有很多种，网络的内外部用户都可以发送这种攻击。 <ul><li>内部用户可以通过长时间<strong>占用系统的内存，CPU处理时间</strong>使其他用户不能及时得到这些资源，而引起拒绝服务攻击；</li><li>外部黑客也可以通过<strong>占用网络连接</strong>使其他用户得不到网络服务。</li></ul></li><li>外部用户针对网络连接发送拒绝服务攻击主要由以下几种模式： <ul><li><strong>消耗资源</strong></li><li><strong>破坏或更改配置信息</strong></li><li><strong>物理破坏或改变网络部件</strong></li><li><strong>利用服务程序中的处理错误使服务失效</strong></li></ul></li><li>分布式拒绝服务DDoS攻击是传统DoS攻击的发展，攻击者<strong>首先侵入并控制一些计算机，然后控制这些计算机同时向一个特定的目标发起拒绝服务攻击</strong>。克服了传统DoS<strong>受网络资源的限制和隐蔽性两大缺点</strong>。</li></ul><h3 id="防御方式" tabindex="-1">防御方式 <a class="header-anchor" href="#防御方式" aria-label="Permalink to &quot;防御方式&quot;">​</a></h3><ol><li><strong>加强对数据包的特征识别</strong>。攻击者发送的数据包中是有一些特征字符串。通过搜寻这些特征字符串，就可以确定攻击服务器和攻击者的位置。</li><li><strong>设置防火墙监视本地主机端口的使用情况</strong>。如果发现端口处于监听状态，则系统很可能收到攻击。</li><li><strong>对通信数据量进行统计也可以获得有关攻击系统的位置和数量信息</strong>。在攻击时，攻击数据的来源地址会发出超出正常极限的数据量</li><li><strong>尽可能的修正已经发现的问题和系统漏洞</strong>。</li></ol><h2 id="欺骗技术" tabindex="-1">欺骗技术 <a class="header-anchor" href="#欺骗技术" aria-label="Permalink to &quot;欺骗技术&quot;">​</a></h2><h3 id="arp欺骗" tabindex="-1">ARP欺骗 <a class="header-anchor" href="#arp欺骗" aria-label="Permalink to &quot;ARP欺骗&quot;">​</a></h3><p><img src="'+c+'" alt=""></p><blockquote><p>正常ARP原理</p></blockquote><p>主机A想知道局域网内主机B的MAC地址，那么<strong>主机A会广播发送ARP请求分组</strong>，<strong>局域网内主机都会收到，但只有B收到解析后知道请求自己的MAC地址</strong>，所以只有B会返回单播的响应分组，告诉A自己的MAC地址</p><p><strong>A收到响应分组后，会建立一个B的ip地址和MAC地址映射</strong>，这个映射是动态存在的，如果一定时间AB不再通信，就会清空这个地址映射，下次如果还要通信，则重复这个过程</p><blockquote><p>ARP欺骗原理</p></blockquote><p><strong>主机A是不管其有没有发送过请求广播分组的，而是只要收到了返回的分组信息，就会刷新IP地址和MAC地址的映射关系</strong></p><p>这样存在安全隐患，假设有主机C，模拟返回分组格式，构造正确的IP地址和自己的MAC地址映射，A收到后也会刷新映射关系。当A再次向B发送信息时，实际就发送到了C的MAC地址，数据就被C监听到了。</p><blockquote><p>ARP欺骗的防范措施</p></blockquote><ol><li>在winxp下输入命令：<code>arp-s gate-way-ip gate-way-mac</code>固化arp表，防止arp欺骗</li><li>使用ARP服务器，通过该服务器查找自己的ARP转换表来响应其他及其的ARP广播，确保这台ARP服务器不被黑</li><li>采用双向绑定的方法解决并且防止ARP欺骗</li><li>ARP防护软件-ARPGuard</li></ol><h3 id="dns欺骗" tabindex="-1">DNS欺骗 <a class="header-anchor" href="#dns欺骗" aria-label="Permalink to &quot;DNS欺骗&quot;">​</a></h3><p>首先<strong>冒充域名服务器，然后把查询的IP地址设为攻击者的IP地址</strong>，这样用户上网就<strong>只能看到攻击者的主页</strong>，而不是用户想要取得的网站的主页了。这就是DNS欺骗的基本原理，也改掉了域名和IP地址的对应关系。黑客冒充dns服务器回复查询IP的</p><p><img src="'+d+'" alt=""></p><blockquote><p>DNS欺骗的检测</p></blockquote><ol><li>被动监听检测：<strong>通过旁路监听的方式</strong>，捕获所有DNS请求和应答数据包，并为其建立一个请求应答映射表。<strong>如果一定时间间隔内，一个请求对应两个或两个以上结果不同的应答包，则怀疑受到了DNS欺骗攻击</strong>。</li><li>虚假报文探测：采用<strong>主动发送探测包</strong>的手段来检测网络内是否存在DNS欺骗攻击者。如果向一个<strong>非DNS服务器发送请求包</strong>，正常来说不会收到任何应答，如果受到了应答包，则说明受到了攻击</li><li>交叉检查查询：客户端收到DNS应答包之后，向DNS服务器<strong>反向查询</strong>应答包中返回IP地址所对应的DNS名字，如果二者一致说明没有受到攻击，否则说明被欺骗。</li></ol><h3 id="ip欺骗" tabindex="-1">IP欺骗 <a class="header-anchor" href="#ip欺骗" aria-label="Permalink to &quot;IP欺骗&quot;">​</a></h3><ol><li>首先使<strong>被冒充主机host b的网络暂时瘫痪</strong>，意面对攻击造成干扰</li><li>然后<strong>连接到目标机host a的某个端口来猜测ISN基值和增加规律</strong></li><li>接下<strong>来把源地址伪装成被冒充主机host b，发送带有SYN标志的数据段请求连接</strong></li><li>然后<strong>等待目标机host a发送SYN+ACK包给已经瘫痪的主机，因为现在看不到这个包</strong></li><li>最后再次伪装成主机host b向目标主机host a发送的ACK，此时发送的数据段<strong>带有预测的目标机的ISN+1</strong></li><li>连接建立，发送命令请求</li></ol><blockquote><p>防范</p></blockquote><p>IP欺骗攻击有难度，但是这种攻击非常广泛。预防这种攻击可以删除UNIX中所有的<code>/etc/hosts.equiv</code>、<code>$HOME/.rhosts</code>文件，修改<code>/etc/inetd.conf</code>文件，使得RPC机制无法应用。</p><p>另外，还可以通过设置防火墙过滤来自外部而信源地址却是内部IP的报文。</p>',63),P=[b];function _(m,q,A,k,S,f){return r(),t("div",null,P)}const I=o(u,[["render",_]]);export{D as __pageData,I as default};
