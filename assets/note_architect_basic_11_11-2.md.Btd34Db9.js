import{_ as a,c as t,o as l,a4 as i,aP as r,aQ as o,aR as s,aS as e,aT as n,aU as h,aV as c}from"./chunks/framework.C3AEaxaX.js";const x=JSON.parse('{"title":"11-2 统一建模语言UML-事务关系图","description":"","frontmatter":{},"headers":[],"relativePath":"note/architect/basic/11/11-2.md","filePath":"note/architect/basic/11/11-2.md","lastUpdated":null}'),p={name:"note/architect/basic/11/11-2.md"},g=i('<h1 id="_11-2-统一建模语言uml-事务关系图" tabindex="-1">11-2 统一建模语言UML-事务关系图 <a class="header-anchor" href="#_11-2-统一建模语言uml-事务关系图" aria-label="Permalink to &quot;11-2 统一建模语言UML-事务关系图&quot;">​</a></h1><h2 id="统一建模语言uml" tabindex="-1">统一建模语言UML <a class="header-anchor" href="#统一建模语言uml" aria-label="Permalink to &quot;统一建模语言UML&quot;">​</a></h2><p>是一种<strong>可视化的建模语言，而非程序设计语言</strong>，支持从需求分析开始的软件开发的全过程。</p><h3 id="组成部分" tabindex="-1">组成部分 <a class="header-anchor" href="#组成部分" aria-label="Permalink to &quot;组成部分&quot;">​</a></h3><p>从总体上看，UML的结构包括 结构块、规则和公共机制 三个部分：</p><ol><li>构造快。UML有三种基本的构造块，分别是<strong>事物（thing）、关系（relationship）和图（diagram）</strong><ol><li>事物是UML的重要组成部分</li><li>关系把事物紧密联系在一起</li><li>图是多个相互关联的事物的集合</li></ol></li><li>公共机制。公共机制是指达到特定目标的公共UML方法</li><li>规则。规则是构造块如何放在一起的规定</li></ol><h3 id="事物" tabindex="-1">事物 <a class="header-anchor" href="#事物" aria-label="Permalink to &quot;事物&quot;">​</a></h3><p><img src="'+r+'" alt=""></p><ul><li><strong>结构事物</strong>：模型的静态部分，如类、接口、用例、构件等</li><li><strong>行为事物</strong>：模型的动态部分，如交互、活动、状态机</li><li><strong>分组事物</strong>：模型的组织部分，如包</li><li><strong>注释事物</strong>：模型的解释部分，依附于一个元素或一组元素之上对其进行约束或解释的简单符号。</li></ul><h3 id="图" tabindex="-1">图 <a class="header-anchor" href="#图" aria-label="Permalink to &quot;图&quot;">​</a></h3><ul><li><strong>依赖</strong>：<strong>一个事物的语义依赖于另一个事物的语义的变化而变化</strong></li><li><strong>关联</strong>：是一种结构关系，描述了一组链，链是对象之间的连接。分为<strong>组合和聚合</strong>，都是<strong>部分和整体的关系</strong>，其中组合事物之间的关系更强。两个类之间的关联，实际上是两个类所扮演角色的关联，因此，两个类之间可以有多个由不同角色标识的关联。</li><li><strong>泛化</strong>：<strong>一般、特殊的关系</strong>，子类和父类之间的关系</li><li><strong>实现</strong>：<strong>一个类元指定了另一个类元保证执行的契约</strong></li></ul><p><img src="'+o+'" alt=""></p><h3 id="考试真题" tabindex="-1">考试真题 <a class="header-anchor" href="#考试真题" aria-label="Permalink to &quot;考试真题&quot;">​</a></h3><p><img src="'+s+'" alt=""></p><p>解析：有争议</p><p>答案：B</p><p><img src="'+e+'" alt=""></p><p>答案：A C D</p><h2 id="uml2-0图" tabindex="-1">UML2.0图 <a class="header-anchor" href="#uml2-0图" aria-label="Permalink to &quot;UML2.0图&quot;">​</a></h2><p>书上是13种图，一共有14种</p><blockquote><p>静态图（结构图）</p></blockquote><ul><li>用例图</li><li>类图</li><li>对象图</li><li>构件图</li><li>部署图</li><li>制品图</li><li>包图</li><li>组合结构图</li></ul><blockquote><p>动态图（行为图）</p></blockquote><ul><li>顺序图</li><li>通信图（协作图）</li><li>定时图</li><li>交互概览图</li><li>状态图</li><li>活动图</li></ul><h3 id="类图" tabindex="-1">类图 <a class="header-anchor" href="#类图" aria-label="Permalink to &quot;类图&quot;">​</a></h3><p>静态图，为系统的<strong>静态设计视图</strong>，展现一组<strong>对象、接口、协作和它们之间的关系</strong></p><p><img src="'+n+'" alt=""></p><h3 id="对象图" tabindex="-1">对象图 <a class="header-anchor" href="#对象图" aria-label="Permalink to &quot;对象图&quot;">​</a></h3><p>静态图，展现<strong>某一时刻一组对象及它们之间的关系</strong>，为类图的某一快照。在没有类图的前提下，对象图就是静态设计视图。</p><p><img src="'+h+'" alt=""></p><h3 id="用例图" tabindex="-1">用例图 <a class="header-anchor" href="#用例图" aria-label="Permalink to &quot;用例图&quot;">​</a></h3><p>静态图，展现了一组<strong>用例、参与者以及它们之间的关系</strong>。用例图中的参与者是人、硬件或其他系统可以扮演的角色（参与到系统交互的实体）；用例是参与者完成的一系列操作，用例之间的关系有 <strong>扩展、包含、泛化</strong></p><p><img src="'+c+'" alt=""></p>',33),d=[g];function u(_,m,b,q,f,k){return l(),t("div",null,d)}const U=a(p,[["render",u]]);export{x as __pageData,U as default};
