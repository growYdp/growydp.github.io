import{_ as l,c as i,o,a4 as t,aX as r,aY as s}from"./chunks/framework.C52qbD-C.js";const _=JSON.parse('{"title":"8-2 开发方法-TPS-MIS-DSS","description":"","frontmatter":{},"headers":[],"relativePath":"note/architect/basic/8-2.md","filePath":"note/architect/basic/8-2.md","lastUpdated":null}'),a={name:"note/architect/basic/8-2.md"},n=t('<h1 id="_8-2-开发方法-tps-mis-dss" tabindex="-1">8-2 开发方法-TPS-MIS-DSS <a class="header-anchor" href="#_8-2-开发方法-tps-mis-dss" aria-label="Permalink to &quot;8-2 开发方法-TPS-MIS-DSS&quot;">​</a></h1><h2 id="信息系统开发方法" tabindex="-1">信息系统开发方法 <a class="header-anchor" href="#信息系统开发方法" aria-label="Permalink to &quot;信息系统开发方法&quot;">​</a></h2><h3 id="结构化方法" tabindex="-1">结构化方法 <a class="header-anchor" href="#结构化方法" aria-label="Permalink to &quot;结构化方法&quot;">​</a></h3><p>结构是指系统内各个组成要素之间的相互联系、相互作用的框架。结构化方法是一种传统的信息系统开发方法，由结构化分析（SA）、结构化设计（SD）和结构化程序设计（SP）三部分有机组合而成。</p><p><strong>精髓：自顶向下、逐步求精和模块化设计。</strong></p><blockquote><p>结构化方法的主要特点</p></blockquote><ol><li><strong>开发目标清晰化</strong>。结构化方法的系统开发遵循“用户第一”的原则</li><li><strong>开发工作阶段化</strong>。每个阶段工作完成后，要根据阶段工作目标和要求进行审查，使各阶段工作有条不紊的进行，便于项目管理与控制。</li><li><strong>开发文档规范化</strong>。结构化方法每个阶段工作完成后，要按照要求完成相应的文档，保证各个工作阶段的衔接与系统维护工作的便利。</li><li><strong>设计方法结构化</strong>。在系统分析与设计时，从整体和全局考虑，自顶向下地分解；在系统实现时，根据设计的要求，先编写各个具体的功能模块，然后自底向上逐步实现整个系统。</li></ol><blockquote><p>结构化方法的不足与局限</p></blockquote><ol><li><strong>开发周期长</strong>：按顺序经历各个阶段，直到实施阶段结束后，用户才能使用系统。</li><li><strong>难以适应需求变化</strong>：不适用于需求不明确或者经常变更的项目。</li><li><strong>很少考虑数据结构</strong>：结构化方法是一种面向数据流的开发方法，很少考虑数据结构</li></ol><blockquote><p>结构化方法一般利用图形表达用户需求</p></blockquote><p>常用工具：<strong>数据流图、数据字典、结构化语言、判定表以及判定树等</strong>。</p><h3 id="原型化方法" tabindex="-1">原型化方法 <a class="header-anchor" href="#原型化方法" aria-label="Permalink to &quot;原型化方法&quot;">​</a></h3><p>称为快速原型法，简称为原型法。是一种根据用户的初步需求，利用系统开发工具，<strong>快速的建立一个系统模型展示给用户，在此基础上与用户交流</strong>，最终实现用户需求的信息系统快速开发的方法。</p><ul><li>按是否实现功能分类分为 <ul><li>水平原型（行为原型，功能的导航）</li><li>垂直原型（机构化原型、实现了部分功能）</li></ul></li><li>按最终结果分类分为 <ul><li>抛弃式原型</li><li>演化式原型</li></ul></li><li>原型法可以使<strong>系统开发的周期缩短、成本和风险降低、速度加快，获得较高的综合开发效益</strong>。</li><li>原型法是以用户为中心来开发系统的，用户参与的程度大大提高，开发的系统符合用户的需求，因而<strong>增加了用户的满意度，提高了系统开发的成功率</strong></li><li>由于用户参与了系统开发的全过程，对系统的功能和结构容易理解和接受，<strong>有利于系统的移交，有利于系统的运行与维护</strong>。</li><li>原型法的不足之处：<strong>开发的环境要求高，管理水平要求高</strong>。</li><li>原型法的优点： <ul><li>更有效的确认用户需求</li><li>直观上看，原型法适用于那些需求不明确的系统开发</li><li>对于分析层面难度大、技术层面难度不大的系统，适用于原型法开发</li></ul></li></ul><h3 id="面向对象方法" tabindex="-1">面向对象方法 <a class="header-anchor" href="#面向对象方法" aria-label="Permalink to &quot;面向对象方法&quot;">​</a></h3><p>面向对象（oo）方法认为，客观世界是由各种对象组成的，任何事物都是对象，每一个对象都有自己的运动规律和内部状态，都属于某个对象类，是该对象类的一个元素。复杂的对象可由相对简单的对象以某种方式而构成，不同的对象组合以及相互作用就构成了系统。</p><ul><li><p>使用oo方法构造的系统具有<strong>更好的复用性</strong>，其关键在于建立一个全面、合理、统一的模型。</p></li><li><p>oo方法也划分阶段，其中的<strong>系统分析、系统设计和系统实现三个阶段之间已经没有“缝隙”</strong>。这三个阶段的界限变得不明确，某项工作既可以在前一个阶段完成，也可以在后一个阶段完成；前一个阶段工作做的不够细，在后一个阶段可以补充。</p></li><li><p>面向对象方法可以普遍适用于各类信息系统的开发。</p></li><li><p>面向对象方法的不足：必须依靠一定的面向对象技术支持，在大型项目的开发上具有一定的局限性，不能涉足系统分析以前的开发环节。</p></li><li><p>现在大型系统的开发，**是将结构化方法和oo方法结合起来。**首先使用结构化方法进行自顶向下的整体划分；然后自底向上的采用oo方法进行开发。结构化方法和oo方法是两种在系统开发领域中相互依存的，不可替代的方法。</p></li></ul><h3 id="面向服务方法" tabindex="-1">面向服务方法 <a class="header-anchor" href="#面向服务方法" aria-label="Permalink to &quot;面向服务方法&quot;">​</a></h3><p>SO <strong>进一步将接口的定义与实现进行解耦，催生了服务和面向服务的开发方法</strong></p><ul><li>应用的角度：组织内部、组织之间各种应用系统的互相通信和互操作性直接影响着组织对信息的掌握程度和处理速度。使<strong>信息系统快速响应需求与环境变化，提高系统的可复用性、信息资源共享和系统之间的互操作性</strong></li></ul><h2 id="业务处理系统tps" tabindex="-1">业务处理系统TPS <a class="header-anchor" href="#业务处理系统tps" aria-label="Permalink to &quot;业务处理系统TPS&quot;">​</a></h2><ul><li><strong>电子数据处理系统</strong>（EDP），<strong>最初级</strong>形式的信息系统。针对管理中具体的事务（如财会、销售、库存等）来辅助管理人员将所发生的数据进行记录、记账、统计和分类，并制成报表等活动，为经营决策提供有效信息的给予计算机的信息系统。</li><li>TPS主要功能：对企业管理中日常事务所发生的数据进行输入、处理和输出。TPS的数据处理周期有5个阶段：<strong>数据输入、数据处理、数据库的维护、文件报表的生成和查询处理</strong></li></ul><ol><li>数据输入。将企业经营活动中产生的<strong>大量原始数据准确、迅速地输入到计算机系统中并存储起来</strong>。数据的输入方式和进度是这个阶段的关键问题。常见的数据输入方式有：人工、自动及二种结合。</li><li>数据处理。TPS常见的数据处理方式：一种是<strong>批处理方式</strong>（将事务数据积累到一定阶段后进行定期处理）；另一种是<strong>联机事务处理方式</strong>（OLTP，实时处理）</li><li>数据库的维护。一个组织的数据库通过TPS来更新，<strong>确保数据库中的数据能及时</strong>、正确地反映当前最新的经营状况。对数据库的访问形式：<strong>检索、修改、存入和删除</strong></li><li>文件报表的生成。TPS的输出就是为终端用户提供所需的有关文件和报表。根据用途不同可分为： <ol><li>行动文件（文件的接收者持有文件后可进行某项事务处理）</li><li>信息文件（类文件向其持有者表明某项业务已经发生了）</li><li>周转文件（交给接收者之后通常还要返回到发送者手中）</li></ol></li><li>查询处理。支持<strong>终端用户的批次查询或联机实时查询</strong>。典型的查询方式是用户通过屏幕显示获得查询结果。</li></ol><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><p><strong>TPS是其他类型信息系统的信息产生器。许多TPS处于企业系统的边界</strong>，将企业与外部环境联系起来的桥梁。TPS性能的好坏将直接影响着组织的整体形象，提高企业市场竞争力的重要因素。TPS<strong>面对的是结构化成都很高的管理问题</strong>，可以采用结构化生命周期法来进行开发</p><h2 id="管理信息系统mis" tabindex="-1">管理信息系统MIS <a class="header-anchor" href="#管理信息系统mis" aria-label="Permalink to &quot;管理信息系统MIS&quot;">​</a></h2><ul><li>由业务处理系统发展而成的，是在<strong>TPS基础上引进大量管理方法对企业整体信息进行处理，并利用信息进行预测、控制、计划、辅助企业全面管理的信息系统</strong>。</li><li>四大部件组成：<strong>信息源、信息处理器、信息用户和信息管理者。</strong></li><li>根据各部件之间的联系可分为开环（不收集外部信息不反馈）和闭环（不断收集信息反馈调整）</li><li>根据处理的内容及决策的层次，可以把管理信息系统看成一个金字塔式的结构。分为<strong>战略计划、管理控制和运行控制3层</strong></li><li>管理信息系统的功能：<strong>功能的完成往往是通过”过程“实现</strong>，过程是<strong>逻辑上相关活动的集合</strong>，因而往往把管理信息系统的功能结构表示成<strong>功能-过程结构</strong></li></ul><p><img src="'+r+'" alt=""></p><h3 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h3><p><strong>用功能、层次矩阵表示</strong></p><ol><li>销售市场子系统</li><li>生产子系统</li><li>后勤子系统</li><li>人事子系统</li><li>财务和会计子系统</li><li>信息处理子系统</li><li>高层管理子系统</li></ol><h2 id="决策支持系统dss" tabindex="-1">决策支持系统DSS <a class="header-anchor" href="#决策支持系统dss" aria-label="Permalink to &quot;决策支持系统DSS&quot;">​</a></h2><ul><li>DSS是一个交互式的、灵活的、适应性强的基于计算机的信息系统，能够为<strong>解决非结构化管理问题提供支持</strong>，以改善决策的质量。</li><li>DSS的<strong>基本模式反映DSS的形式及其与“真实系统”、人和外部环境的关系</strong>。<strong>管理者处于核心地位</strong>，运用自己的支持和经验，结合决策支持系统提供的支持，对其管理的“真实系统”进行决策</li><li>DSS的两种基本结构形式是<strong>两库结构和基于知识的结构</strong>，实际中的DSS由这两种基本结构通过分解或增加某些部件演变而来。两库结构由<strong>数据库子系统、模型库子系统和对话子系统</strong>形成三角形分布的结构</li></ul><p><img src="'+s+'" alt=""></p><ul><li>决策支持系统的总体功能是支持各种层次的人们进行决策。</li><li>决策支持系统的特点： <ul><li>面向决策者</li><li>支持对半结构化问题的决策</li><li>作用是辅助决策者、支持决策者</li><li>提现决策过程的动态行</li><li>提倡交互式处理</li></ul></li></ul><h3 id="组成-1" tabindex="-1">组成 <a class="header-anchor" href="#组成-1" aria-label="Permalink to &quot;组成&quot;">​</a></h3><ol><li><strong>数据的重组和确认</strong>，与决策支持系统相关的数据库的问题。<strong>获得正确的数据并且可用理想的形式操作这些数据</strong>。这个问题可以通过数据仓库的概念解决。</li><li>数据字典的建立：数据仓库是一个与作业层系统分离存在的数据库。通过<strong>对数据仓库的存取</strong>，管理者可以作出以事实为根据的决策来解决许多业务问题。</li><li>数据挖掘和智能体。一旦建成数据仓库，管理者们需要<strong>运用工具进行数据存取和查询，使用的工具称为智能体</strong>。<strong>数据挖掘</strong>的结果类型： <ol><li>联合 把各个事件联系在一起的过程</li><li>定序 识别模式的过程</li><li>分类 根据模式组织数据的过程</li><li>聚类 推导特定小组与其他小组相区分的判断规则的过程（分类与聚类的区别：分类给出一个具体的规则；聚类是这一类别的群体自己会有的）</li></ol></li><li>模型建立。模型管理的目的就是<strong>帮助决策者理解与选择有关的现象</strong>。建立模型的方法有穷枚举法、算法、启发式和模拟法。</li></ol>',37),e=[n];function g(h,c,u,d,p,S){return o(),i("div",null,e)}const b=l(a,[["render",g]]);export{_ as __pageData,b as default};
