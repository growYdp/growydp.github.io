import{_ as a,c as t,o as r,a4 as i,aS as l,aT as o,aU as s,aV as e,aW as n,aX as p,aY as h,aZ as c,a_ as g,a$ as m,b0 as d,b1 as _,b2 as u,b3 as b,b4 as q,b5 as f,b6 as k,b7 as P}from"./chunks/framework.BAVCir-e.js";const V=JSON.parse('{"title":"11-2 统一建模语言UML-事务关系图","description":"","frontmatter":{},"headers":[],"relativePath":"note/architect/basic/11/11-2.md","filePath":"note/architect/basic/11/11-2.md","lastUpdated":1730789332000}'),x={name:"note/architect/basic/11/11-2.md"},U=i('<h1 id="_11-2-统一建模语言uml-事务关系图" tabindex="-1">11-2 统一建模语言UML-事务关系图 <a class="header-anchor" href="#_11-2-统一建模语言uml-事务关系图" aria-label="Permalink to &quot;11-2 统一建模语言UML-事务关系图&quot;">​</a></h1><h2 id="统一建模语言uml" tabindex="-1">统一建模语言UML <a class="header-anchor" href="#统一建模语言uml" aria-label="Permalink to &quot;统一建模语言UML&quot;">​</a></h2><p>是一种<strong>可视化的建模语言，而非程序设计语言</strong>，支持从需求分析开始的软件开发的全过程。</p><h3 id="组成部分" tabindex="-1">组成部分 <a class="header-anchor" href="#组成部分" aria-label="Permalink to &quot;组成部分&quot;">​</a></h3><p>从总体上看，UML的结构包括 结构块、规则和公共机制 三个部分：</p><ol><li>构造快。UML有三种基本的构造块，分别是<strong>事物（thing）、关系（relationship）和图（diagram）</strong><ol><li>事物是UML的重要组成部分</li><li>关系把事物紧密联系在一起</li><li>图是多个相互关联的事物的集合</li></ol></li><li>公共机制。公共机制是指达到特定目标的公共UML方法</li><li>规则。规则是构造块如何放在一起的规定</li></ol><h3 id="事物" tabindex="-1">事物 <a class="header-anchor" href="#事物" aria-label="Permalink to &quot;事物&quot;">​</a></h3><p><img src="'+l+'" alt=""></p><ul><li><strong>结构事物</strong>：模型的静态部分，如类、接口、用例、构件等</li><li><strong>行为事物</strong>：模型的动态部分，如交互、活动、状态机</li><li><strong>分组事物</strong>：模型的组织部分，如包</li><li><strong>注释事物</strong>：模型的解释部分，依附于一个元素或一组元素之上对其进行约束或解释的简单符号。</li></ul><h3 id="图" tabindex="-1">图 <a class="header-anchor" href="#图" aria-label="Permalink to &quot;图&quot;">​</a></h3><ul><li><strong>依赖</strong>：<strong>一个事物的语义依赖于另一个事物的语义的变化而变化</strong></li><li><strong>关联</strong>：是一种结构关系，描述了一组链，链是对象之间的连接。分为<strong>组合和聚合</strong>，都是<strong>部分和整体的关系</strong>，其中组合事物之间的关系更强。两个类之间的关联，实际上是两个类所扮演角色的关联，因此，两个类之间可以有多个由不同角色标识的关联。</li><li><strong>泛化</strong>：<strong>一般、特殊的关系</strong>，子类和父类之间的关系</li><li><strong>实现</strong>：<strong>一个类元指定了另一个类元保证执行的契约</strong></li></ul><p><img src="'+o+'" alt=""></p><h3 id="考试真题" tabindex="-1">考试真题 <a class="header-anchor" href="#考试真题" aria-label="Permalink to &quot;考试真题&quot;">​</a></h3><p><img src="'+s+'" alt=""></p><p>解析：有争议</p><p>答案：B</p><p><img src="'+e+'" alt=""></p><p>答案：A C D</p><h2 id="uml2-0图" tabindex="-1">UML2.0图 <a class="header-anchor" href="#uml2-0图" aria-label="Permalink to &quot;UML2.0图&quot;">​</a></h2><p>书上是13种图，一共有14种</p><blockquote><p>静态图（结构图）</p></blockquote><ul><li>用例图</li><li>类图</li><li>对象图</li><li>构件图</li><li>部署图</li><li>制品图</li><li>包图</li><li>组合结构图</li></ul><blockquote><p>动态图（行为图）</p></blockquote><ul><li>顺序图</li><li>通信图（协作图）</li><li>定时图</li><li>交互概览图</li><li>状态图</li><li>活动图</li></ul><h3 id="类图" tabindex="-1">类图 <a class="header-anchor" href="#类图" aria-label="Permalink to &quot;类图&quot;">​</a></h3><p>静态图，为系统的<strong>静态设计视图</strong>，展现一组<strong>对象、接口、协作和它们之间的关系</strong></p><p><img src="'+n+'" alt=""></p><h3 id="对象图" tabindex="-1">对象图 <a class="header-anchor" href="#对象图" aria-label="Permalink to &quot;对象图&quot;">​</a></h3><p>静态图，展现<strong>某一时刻一组对象及它们之间的关系</strong>，为类图的某一快照。在没有类图的前提下，对象图就是静态设计视图。</p><p><img src="'+p+'" alt=""></p><h3 id="用例图" tabindex="-1">用例图 <a class="header-anchor" href="#用例图" aria-label="Permalink to &quot;用例图&quot;">​</a></h3><p>静态图，展现了一组<strong>用例、参与者以及它们之间的关系</strong>。用例图中的参与者是人、硬件或其他系统可以扮演的角色（参与到系统交互的实体）；用例是参与者完成的一系列操作，用例之间的关系有 <strong>扩展、包含、泛化</strong></p><p><img src="'+h+'" alt=""></p><h3 id="序列图" tabindex="-1">序列图 <a class="header-anchor" href="#序列图" aria-label="Permalink to &quot;序列图&quot;">​</a></h3><p>即顺序图，动态图，是场景的图形化表示，描述了<strong>以时间顺序组织的对象之间的交互活动。</strong></p><ul><li>同步消息：进行阻塞调用，调用者中止执行，等待控制权返回，需要等待返回消息，用实心三角箭头表示</li><li>异步消息：发出消息后继续执行，不引起调用者阻塞，也不等待返回消息，用空心三角箭头表示</li><li>返回消息：由从右到左的虚线箭头表示</li></ul><p><img src="'+c+'" alt=""></p><h3 id="通信图" tabindex="-1">通信图 <a class="header-anchor" href="#通信图" aria-label="Permalink to &quot;通信图&quot;">​</a></h3><p>动态图，即<strong>协作图，强调参加交互的对象的组织</strong></p><p><img src="'+g+'" alt=""></p><h3 id="状态图" tabindex="-1">状态图 <a class="header-anchor" href="#状态图" aria-label="Permalink to &quot;状态图&quot;">​</a></h3><p>动态图，展现了一个状态机，描述<strong>单个对象在多个用例中的行为</strong>，包括简单状态和组合状态。转换可以通过<strong>事件触发器触发</strong>，事件触发后相应的<strong>监护条件</strong>（达到状态切换的条件）会进行检查。状态图中转换和状态是两个独立的概念，如下：图中方框代表状态，箭头上的代表触发事件，实心圆点为起点和终点</p><p><img src="'+m+'" alt=""></p><h3 id="活动图" tabindex="-1">活动图 <a class="header-anchor" href="#活动图" aria-label="Permalink to &quot;活动图&quot;">​</a></h3><p>动态图，是一种<strong>特殊的状态图</strong>，展现了<strong>在系统内从一个活动到另一个活动的流程</strong>。活动的分岔和汇合线是一条水平粗线。<strong>并发分岔、并发汇合、监护表达式、分支、流</strong>等名词及含义。每个分岔的分支数代表了可同时运行的线程数。活动图中能够并行执行的是在一个分岔粗线下的分支上的活动</p><p><img src="'+d+'" alt=""></p><h3 id="构件图-组件图" tabindex="-1">构件图（组件图） <a class="header-anchor" href="#构件图-组件图" aria-label="Permalink to &quot;构件图（组件图）&quot;">​</a></h3><p>静态图，为系统<strong>静态实现视图，展现了一组构件之间的组织和依赖</strong></p><p><img src="'+_+'" alt=""></p><p>供接口就是可以供应给别人，是半圆。需接口是需要的接口，是圆</p><h3 id="部署图" tabindex="-1">部署图 <a class="header-anchor" href="#部署图" aria-label="Permalink to &quot;部署图&quot;">​</a></h3><p>静态图，为系统静态部署视图，部署图物理模块的节点分布。它与构件图相关，通常一个结点包含一个或多个构件。其依赖关系类似于包依赖，因此部署组件之间的依赖是单向的类似于包含关系。</p><p><img src="'+u+'" alt=""></p><h2 id="uml-4-1视图" tabindex="-1">UML 4+1视图 <a class="header-anchor" href="#uml-4-1视图" aria-label="Permalink to &quot;UML 4+1视图&quot;">​</a></h2><p>视图是逻辑上的概念，视图由图来实现</p><ol><li>逻辑视图。逻辑视图也称为设计视图，它表示了设计模型中在架构方面具有重要意义的部分，即类、子系统、包和用例实现的子集。</li><li>进程视图。进程视图是可执行线程和进程作为活动类的建模，它是逻辑视图的一次执行实例，描述了并发与同步结构。</li><li>实现视图。实现视图对组成基于系统的物理代码的文件和构件进行建模</li><li>部署视图。部署视图把构件部署到一组物理节点上，表示软件到硬件的映射和分布结构</li><li>用例视图。用例视图是最基本的需求分析模型</li></ol><p><img src="'+b+'" alt=""></p><h3 id="考试真题-1" tabindex="-1">考试真题 <a class="header-anchor" href="#考试真题-1" aria-label="Permalink to &quot;考试真题&quot;">​</a></h3><p><img src="'+q+'" alt=""></p><p>答案：C</p><p><img src="'+f+'" alt=""></p><p>答案：B</p><p><img src="'+k+'" alt=""></p><p>答案：A D</p><p><img src="'+P+'" alt=""></p><p>答案：D A B</p>',66),L=[U];function M(T,A,S,B,D,$){return r(),t("div",null,L)}const N=a(x,[["render",M]]);export{V as __pageData,N as default};
