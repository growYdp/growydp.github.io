import{_ as r,c as a,o,a4 as e,av as d,aw as s,ax as l,ay as n,az as i,aA as t}from"./chunks/framework.C8kugyzg.js";const f=JSON.parse('{"title":"10-3 处理流程设计-系统设计-人机界面设计","description":"","frontmatter":{},"headers":[],"relativePath":"note/architect/basic/10-3.md","filePath":"note/architect/basic/10-3.md","lastUpdated":1728955314000}'),p={name:"note/architect/basic/10-3.md"},h=e('<h1 id="_10-3-处理流程设计-系统设计-人机界面设计" tabindex="-1">10-3 处理流程设计-系统设计-人机界面设计 <a class="header-anchor" href="#_10-3-处理流程设计-系统设计-人机界面设计" aria-label="Permalink to &quot;10-3 处理流程设计-系统设计-人机界面设计&quot;">​</a></h1><h2 id="处理流程设计" tabindex="-1">处理流程设计 <a class="header-anchor" href="#处理流程设计" aria-label="Permalink to &quot;处理流程设计&quot;">​</a></h2><h3 id="流程表示工具" tabindex="-1">流程表示工具 <a class="header-anchor" href="#流程表示工具" aria-label="Permalink to &quot;流程表示工具&quot;">​</a></h3><blockquote><p><strong>程序流程图（Program Flow Diagram, PFD）</strong></p></blockquote><p>用一些图框表示各种操作，它独立与任何一种程序设计语言，比较直观、清洗，易于学习掌握。任何复杂的程序流程图都应该由<strong>顺序、选择和循环结构</strong>组成或嵌套而成。</p><blockquote><p><strong>IPO图</strong></p></blockquote><p>(Input-Process-Output 输入-加工-输出)</p><p>也是流程描述工具，用来描述构成软件系统的每个模块的<strong>输入、输出和数据加工。</strong></p><blockquote><p><strong>N-S图</strong> 盒图</p></blockquote><p>容易表示嵌套和层次关系，并具有强烈的结构化特征。但是当问题很复杂时，N-S图可能很大，因此<strong>不适合于复杂程序的设计</strong>。</p><blockquote><p><strong>问题分析图（PAD）</strong></p></blockquote><p>是一种支持<strong>结构化程序设计</strong>的图形工具。PAD具有清晰的逻辑结构、标准化的图形等优点，更重要的是，它引导设计人员使用结构化程序设计方法，从而提高程序的质量。</p><h3 id="业务流程重组bpr-reset" tabindex="-1">业务流程重组BPR Reset <a class="header-anchor" href="#业务流程重组bpr-reset" aria-label="Permalink to &quot;业务流程重组BPR Reset&quot;">​</a></h3><p>BPR是对企业的业务流程进行<strong>根本性的再思考和彻底性的再设计</strong>，从而获得可以用诸如成本、质量、服务和速度等方面的业绩来衡量的显著性的成就。<strong>BPR设计原则、系统规划和步骤如下图所示</strong>：</p><p><img src="'+d+'" alt=""></p><p><strong>以流程为中心，以人为本，以客户为导向</strong></p><h3 id="业务流程管理-management" tabindex="-1">业务流程管理 Management <a class="header-anchor" href="#业务流程管理-management" aria-label="Permalink to &quot;业务流程管理 Management&quot;">​</a></h3><p>BPM是一种以<strong>规范化的构造端到端的卓越业务流程为中心</strong>，以持续地<strong>提高组织业务绩效为目的</strong>的系统化方法。</p><p>BPM与BPR管理思想最根本的不同就在于<strong>流程管理并不要求对所有的流程再造</strong>。构造卓越的业务流程并不是流程再造，而是<strong>根据现有流程的基本情况，对流程进行规范化的设计。</strong></p><p>流程管理包含三个层面：<strong>规范流程、优化流程和再造流程</strong></p><h3 id="考试真题" tabindex="-1">考试真题 <a class="header-anchor" href="#考试真题" aria-label="Permalink to &quot;考试真题&quot;">​</a></h3><p><img src="'+s+'" alt=""></p><p>答案：A</p><p><img src="'+l+'" alt=""></p><p>答案：B A</p><h2 id="系统设计" tabindex="-1">系统设计 <a class="header-anchor" href="#系统设计" aria-label="Permalink to &quot;系统设计&quot;">​</a></h2><ul><li>系统设计的<strong>主要目的</strong>：为系统指定蓝图，在各种技术和实施方法中权衡利弊，精心设计，合理的使用各种资源，<strong>最终勾画出新系统的详细设计方法</strong>。</li><li>系统设计方法：<strong>结构化设计方法，面向对象设计方法</strong>。</li><li>系统设计的主要内容：<strong>概要设计、详细设计</strong></li><li>概要设计基本任务：又称为<strong>系统总体结构设计</strong>，是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，<strong>形成软件的模块结构图，即系统结构图</strong></li><li>详细设计的基本任务：<strong>模块内详细算法设计、模块内数据结构设计、数据库的物理设计、其他设计（代码、输入/输出格式、用户界面）</strong>、编写详细设计说明书、评审。</li></ul><h3 id="系统设计基本原理" tabindex="-1">系统设计基本原理 <a class="header-anchor" href="#系统设计基本原理" aria-label="Permalink to &quot;系统设计基本原理&quot;">​</a></h3><ul><li>抽象化；</li><li>自顶向下，逐步求精</li><li>信息屏蔽；</li><li>模块独立（高内聚，低耦合）</li></ul><h3 id="系统设计原则" tabindex="-1">系统设计原则 <a class="header-anchor" href="#系统设计原则" aria-label="Permalink to &quot;系统设计原则&quot;">​</a></h3><ul><li>保持模块的大小适中；</li><li>尽可能减少调度的深度；</li><li>多扇入，少扇出（扇出就是自身调用别人，扇入是自身被别人调用）。多扇入就是很多人调用自身模块，那是好事情，<strong>自身价值越大，复用程度高</strong>。少扇出就是尽量少调用别人，关<strong>联别人模块太多，不易维护</strong></li><li>单入口，单出口（即单输入，单输出）</li><li>模块的作用域应该在模块之内</li><li>功能应该是可预测的，</li></ul><h3 id="系统设计基本原理-1" tabindex="-1">系统设计基本原理 <a class="header-anchor" href="#系统设计基本原理-1" aria-label="Permalink to &quot;系统设计基本原理&quot;">​</a></h3><p>抽象、模块化、信息屏蔽、模块独立。</p><p>衡量模块独立程度的标准有两个，耦合性和内聚性，</p><blockquote><p>内聚程度从低到高如下表：</p></blockquote><table tabindex="0"><thead><tr><th>内聚分类</th><th>定义</th><th>记忆关键字</th></tr></thead><tbody><tr><td>偶然内聚</td><td>一个模块内的各处理元素之间没有任何联系</td><td>无直接关系</td></tr><tr><td>逻辑内聚</td><td>模块内执行若干个逻辑上相似的功能，通过<strong>参数确定</strong>该模块完成哪一个功能</td><td>逻辑相似，参数决定</td></tr><tr><td>时间内聚</td><td>把需要同时执行的动作组合在一起形成的模块</td><td>同时执行</td></tr><tr><td>过程内聚</td><td>一个模块完成多个任务，这些任务必须按指定的过程执行</td><td>指定的过程顺序</td></tr><tr><td>通信内聚</td><td>模块内的所有处理元素都在同一个数据结构上操作，或者各处理使用相同的输入数据或者产生相同的输出数据</td><td>相同数据结构、相同输入输出</td></tr><tr><td>顺序内聚</td><td>一个模块中的各个处理元素都密切相关于同一功能且必须顺序执行，前一个功能元素的输出就是下一个功能元素的输入</td><td>顺序执行，输入为输出</td></tr><tr><td>功能内聚</td><td>最强的内聚，模块内的所有元素共同作用完成一个功能，缺一不可。</td><td>共同作用、缺一不可</td></tr></tbody></table><blockquote><p>耦合程度从低到高如下表</p></blockquote><table tabindex="0"><thead><tr><th>耦合分类</th><th>定义</th><th>记忆关键字</th></tr></thead><tbody><tr><td>无直接耦合</td><td>两个模块之间没有直接的关系，它们分别从属于不同模块的控制与调用，不传递任何信息</td><td>无之间关系</td></tr><tr><td>数据耦合</td><td>两个模块之间有调用关系，传递的是简单的数据值，相当于高级语言中的值传递</td><td>传递数据值调用</td></tr><tr><td>标记耦合</td><td>两个模块之间传递的是数据结构</td><td>传递数据结构</td></tr><tr><td>控制耦合</td><td>一个模块调用另一个模块时，传递的是控制变量，被调用模块通过该控制变量的值有选择的执行模块内的某一功能</td><td>控制变量，选择执行某一功能</td></tr><tr><td>外部耦合</td><td>模块间通过软件之外的环境联合（如I/O将模块耦合到特定的设备、格式、通信协议上）时</td><td>软件外部环境</td></tr><tr><td>公共耦合</td><td>通过一个公共数据环境相互作用的那些模块间的耦合</td><td>公共数据结构</td></tr><tr><td>内容耦合</td><td>当一个模块直接使用另一个模块的内部数据，或通过非正常入口转入另一个模块内部时</td><td>模块内部关联</td></tr></tbody></table><h3 id="考试真题-1" tabindex="-1">考试真题 <a class="header-anchor" href="#考试真题-1" aria-label="Permalink to &quot;考试真题&quot;">​</a></h3><p><img src="'+n+'" alt=""></p><p>答案：C</p><p><img src="'+i+'" alt=""></p><p>答案：D</p><p><img src="'+t+'" alt=""></p><p>答案：A B</p><p><img src="'+t+'" alt=""></p><p>解析：A 分解为多个子模块，扇出大是好事情，本来其他模块调用本模块只用一个，分成多个子模块就需要调用多个 不行； B 扇出小符合我们的要求，不需要做任何事情； C 扇入越多越好，自身价值越大。</p><p>答案：D</p><h2 id="人机界面设计" tabindex="-1">人机界面设计 <a class="header-anchor" href="#人机界面设计" aria-label="Permalink to &quot;人机界面设计&quot;">​</a></h2><p>人机界面设计三大黄金原则：</p><ul><li><strong>置于用户控制之下</strong></li><li><strong>减少用户的记忆负担</strong></li><li><strong>保持界面的一致性</strong></li></ul>',51),c=[h];function g(u,b,m,_,q,P){return o(),a("div",null,c)}const x=r(p,[["render",g]]);export{f as __pageData,x as default};
